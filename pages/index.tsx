import React, {useState, useEffect} from 'react'
import type { NextPage } from 'next'
import Head from 'next/head'
import * as THREE from 'three'
import {OrbitControls} from 'three/examples/jsm/controls/OrbitControls'

const Home: NextPage = () => {

  const webGLRender = () => {

    let container:any = document.getElementById('webgl-canvas')
    let camera: THREE.PerspectiveCamera
    let torus:any = []
    const scene = new THREE.Scene()

    const renderer = new THREE.WebGLRenderer({antialias: true, canvas: container, alpha:false})
    renderer.setClearColor('#002233', 1)
    renderer.setSize(container.clientWidth, container.clientHeight)
    renderer.setPixelRatio(window.devicePixelRatio)

    const viewport = {
      width : container.clientWidth,
      height : container.clientHeight,
      aspectRatio : window.innerWidth / window.innerHeight
    }

    camera = new THREE.PerspectiveCamera( 
      75, 
      container.clientWidth / container.clientHeight,
      1, 
      1000 
    );
    camera.position.set(0,1, 5)
    scene.add( camera );

    const controls = new OrbitControls( camera, renderer.domElement )
    controls.update()

    const viewSize = {
      distance : 3,
      vFov : (camera.fov * Math.PI) / 180,
      height : 2 * Math.tan((camera.fov * Math.PI) / 180 / 2) * 3,
      width : 2 * Math.tan((camera.fov * Math.PI) / 180 / 2) * 3 * viewport.aspectRatio,
    }

    let group = new THREE.Object3D();

    init()

    function init(){

      const geometry = new THREE.BufferGeometry()
      const vertices:any=[]

      for (let t = 0; t<30;t++){
        const radius = 2 + Math.sin(t*Math.PI/15) 
        for ( let i = 0; i < 80; i ++ ) {
          const x = Math.cos(i * Math.PI/40) * radius
          const z = Math.sin(i * Math.PI/40) * radius        
          const y = Math.cos(t*Math.PI/15) 
          vertices.push( x, y, z )
        }
        geometry.setAttribute( 'position', new THREE.Float32BufferAttribute( vertices, 3 ) );
        const toru = new THREE.Points( geometry, new THREE.PointsMaterial( { size: 0.02, color:0xffffff } ) )
        torus.push(toru)
      }

      for (let t = 0; t<30;t++){
        group.add(torus[t])
      }
      scene.add(group)
      animate();
    }


    function animate() {
      const time = performance.now() * 0.001

      for (let t = 0; t < 30; t++ ){

        const radius = 1.2 + Math.sin( time + t * Math.PI / 15) 

        for ( let i = t * 80 ; i < ( t + 1 ) * 80; i ++ ) {
          const x = Math.cos( i * Math.PI / 40) * radius
          const z = Math.sin( i * Math.PI / 40) * radius        
          const y = Math.cos( time + t * Math.PI / 15)
          torus[t].geometry.attributes.position.array[ i * 3 ] = x
          torus[t].geometry.attributes.position.array[ i * 3 + 1 ] = y
          torus[t].geometry.attributes.position.array[ i * 3 + 2 ] = z
        }        
        torus[t].geometry.attributes.position.needsUpdate = true
      }
      group.rotation.x = time * 0.2
      group.rotation.z = time * 0.2

      controls.update()

      requestAnimationFrame( animate );      
      renderer.render( scene, camera)
    }

    window.addEventListener( 'resize', function() {
      const container_wrapper = document.getElementById('canvas-wrapper')

      if (container_wrapper){
        camera.aspect = container_wrapper.clientWidth / container_wrapper.clientHeight;
        camera.updateProjectionMatrix()

        renderer.setSize( container_wrapper.clientWidth, container_wrapper.clientHeight );
      }
    })
  }

  useEffect(() => {
    if(typeof document !== "undefined"){
      webGLRender()
    }
  }, [])

  return (
    <div className='min-w-screen min-h-screen'>

      <Head>
        <title>Animation</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/logo.png" />
      </Head>
      
      <div 
        id='canvas-wrapper'
        className='relative top-0 left-0 w-screen h-screen pointer-events-auto'
      >

        <canvas id='webgl-canvas' className='w-screen h-screen'/>

      </div>

    </div>
  )
}

export default Home
